//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
public:

    bool condition(int dis, int k, vector<int>& stalls) {
        int cows=1; // total no. of cowsx which are already placed.
        int prev_cow_pos = stalls[0]; // it denoted the position of the previous cow
        for(int i=1;i<stalls.size();i++) {
            if(stalls[i]-prev_cow_pos>=dis) {
               cows++;
               prev_cow_pos = stalls[i];
            }
            if(cows==k) return true;
        }
        return false;
    }
    int solve(int n, int k, vector<int> &stalls) {
        sort(stalls.begin(),stalls.end());
        int l = 1; // left pointer
        int r = stalls[n-1]-stalls[0]; // stalls[n-1]-stalls[0]; // right pointer
        int ans = -1;
        while(l<=r) {
            int mid = l+(r-l)/2;
            if(condition(mid,k,stalls)==true) {
                l = mid+1;
                ans = mid;
            }
            else{
                r = mid-1;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t = 1;
    cin >> t;

    // freopen ("output_gfg.txt", "w", stdout);

    while (t--) {
        // Input

        int n, k;
        cin >> n >> k;

        vector<int> stalls(n);
        for (int i = 0; i < n; i++) {
            cin >> stalls[i];
        }
        // char ch;
        // cin >> ch;

        Solution obj;
        cout << obj.solve(n, k, stalls) << endl;

        // cout << "~\n";
    }
    // fclose(stdout);

    return 0;
}
// } Driver Code Ends
